{"ast":null,"code":"import * as types from \"../constants/questionsActionTypes.js\";\nconst initialState = {\n  questions: [],\n  loading: false,\n  success: false,\n  failed: false,\n  message: \"\",\n  question: null,\n  isCreate: false,\n  isUpdate: false,\n  isDelete: false\n};\nconst questionReducer = function () {\n  var _state$questions;\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case types.GET_QUESTIONS:\n      return {\n        ...state\n      };\n    case types.GET_QUESTIONS_SUCCESS:\n      return {\n        ...state,\n        questions: action.payload,\n        loading: false,\n        success: true\n      };\n    case types.GET_QUESTIONS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        success: false,\n        message: action.payload.toString()\n      };\n    case types.GET_QUESTIONS_BY_ID:\n      return {\n        ...state,\n        loading: true\n      };\n    case types.GET_QUESTIONS_BY_ID_SUCCESS:\n      return {\n        ...state,\n        question: action.payload,\n        loading: false,\n        success: true\n      };\n    case types.GET_QUESTIONS_BY_ID_FAILED:\n      return {\n        ...state,\n        loading: false,\n        success: false,\n        message: action.payload.toString()\n      };\n\n    // create course\n    case types.CREATE_QUESTIONS:\n      return {\n        ...state,\n        loading: true\n      };\n    case types.CREATE_QUESTIONS_SUCCESS:\n      return {\n        ...state,\n        questions: [action.payload, ...state.questions],\n        loading: false,\n        success: true,\n        message: \"\",\n        isCreate: true\n      };\n    case types.CREATE_QUESTIONS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        success: false,\n        message: action.payload.toString()\n      };\n\n    // update course\n    case types.UPDATE_QUESTIONS:\n      return {\n        ...state,\n        loading: true\n      };\n    case types.UPDATE_QUESTIONS_SUCCESS:\n      return {\n        ...state,\n        questions: state.questions.map(question => {\n          var _action$payload;\n          return question.id === parseInt((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.id) ? parseInt(action.payload) : question;\n        }),\n        loading: false,\n        success: true,\n        message: \"\",\n        isUpdate: true\n      };\n    case types.UPDATE_QUESTIONS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        success: false,\n        message: action.payload.toString()\n      };\n\n    // delete course\n    case types.DELETE_QUESTIONS:\n      return {\n        ...state,\n        loading: true\n      };\n    case types.DELETE_QUESTIONS_SUCCESS:\n      return {\n        ...state,\n        questions: state === null || state === void 0 ? void 0 : (_state$questions = state.questions) === null || _state$questions === void 0 ? void 0 : _state$questions.filter(quest => {\n          var _action$payload2;\n          return parseInt(quest === null || quest === void 0 ? void 0 : quest.id) !== parseInt(action === null || action === void 0 ? void 0 : (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.id);\n        }),\n        loading: false,\n        success: true\n      };\n    case types.DELETE_QUESTIONS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        success: false,\n        message: action.payload.toString()\n      };\n    case types.CLEAN_UP_QUESTIONS:\n      return {\n        ...state,\n        loading: false,\n        success: false,\n        message: \"\",\n        isCreate: false,\n        isUpdate: false,\n        isDelete: false\n      };\n    default:\n      return state;\n  }\n};\nexport default questionReducer;","map":{"version":3,"names":["types","initialState","questions","loading","success","failed","message","question","isCreate","isUpdate","isDelete","questionReducer","state","action","type","GET_QUESTIONS","GET_QUESTIONS_SUCCESS","payload","GET_QUESTIONS_FAILED","toString","GET_QUESTIONS_BY_ID","GET_QUESTIONS_BY_ID_SUCCESS","GET_QUESTIONS_BY_ID_FAILED","CREATE_QUESTIONS","CREATE_QUESTIONS_SUCCESS","CREATE_QUESTIONS_FAILED","UPDATE_QUESTIONS","UPDATE_QUESTIONS_SUCCESS","map","id","parseInt","UPDATE_QUESTIONS_FAILED","DELETE_QUESTIONS","DELETE_QUESTIONS_SUCCESS","filter","quest","DELETE_QUESTIONS_FAILED","CLEAN_UP_QUESTIONS"],"sources":["/home/babi/Desktop/Medical-Question-Bank/Medical-Question-Bank-Website/admin/src/redux/questionReducer.js"],"sourcesContent":["import * as types from \"../constants/questionsActionTypes.js\";\n\nconst initialState = {\n  questions: [],\n  loading: false,\n  success: false,\n  failed: false,\n  message: \"\",\n  question: null,\n  isCreate: false,\n  isUpdate: false,\n  isDelete: false,\n};\n\nconst questionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.GET_QUESTIONS:\n      return {\n        ...state,\n      };\n    case types.GET_QUESTIONS_SUCCESS:\n      return {\n        ...state,\n        questions: action.payload,\n        loading: false,\n        success: true,\n      };\n    case types.GET_QUESTIONS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        success: false,\n        message: action.payload.toString(),\n      };\n\n    case types.GET_QUESTIONS_BY_ID:\n      return {\n        ...state,\n        loading: true,\n      };\n    case types.GET_QUESTIONS_BY_ID_SUCCESS:\n      return {\n        ...state,\n        question: action.payload,\n        loading: false,\n        success: true,\n      };\n    case types.GET_QUESTIONS_BY_ID_FAILED:\n      return {\n        ...state,\n        loading: false,\n        success: false,\n        message: action.payload.toString(),\n      };\n\n    // create course\n    case types.CREATE_QUESTIONS:\n      return {\n        ...state,\n        loading: true,\n      };\n    case types.CREATE_QUESTIONS_SUCCESS:\n      return {\n        ...state,\n        questions: [action.payload, ...state.questions],\n        loading: false,\n        success: true,\n        message: \"\",\n        isCreate: true,\n      };\n    case types.CREATE_QUESTIONS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        success: false,\n        message: action.payload.toString(),\n      };\n\n    // update course\n    case types.UPDATE_QUESTIONS:\n      return {\n        ...state,\n        loading: true,\n      };\n    case types.UPDATE_QUESTIONS_SUCCESS:\n      return {\n        ...state,\n        questions: state.questions.map((question) =>\n          question.id === parseInt(action.payload?.id)\n            ? parseInt(action.payload)\n            : question\n        ),\n        loading: false,\n        success: true,\n        message: \"\",\n        isUpdate: true,\n      };\n    case types.UPDATE_QUESTIONS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        success: false,\n        message: action.payload.toString(),\n      };\n\n    // delete course\n    case types.DELETE_QUESTIONS:\n      return {\n        ...state,\n        loading: true,\n      };\n    case types.DELETE_QUESTIONS_SUCCESS:\n      return {\n        ...state,\n\n        questions: state?.questions?.filter(\n          (quest) => parseInt(quest?.id) !== parseInt(action?.payload?.id)\n        ),\n        loading: false,\n        success: true,\n      };\n    case types.DELETE_QUESTIONS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        success: false,\n        message: action.payload.toString(),\n      };\n\n    case types.CLEAN_UP_QUESTIONS:\n      return {\n        ...state,\n        loading: false,\n        success: false,\n        message: \"\",\n        isCreate: false,\n        isUpdate: false,\n        isDelete: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default questionReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}