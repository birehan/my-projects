{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport * as types from \"../constants/questionsActionTypes.js\";\nimport * as api from \"../features/questionsets/api/index.js\";\nfunction createQuestions(_ref) {\n  let {\n    payload\n  } = _ref;\n  return function* () {\n    try {\n      const questions = yield call(api.createQuestions, payload);\n      yield put({\n        type: types.CREATE_QUESTIONS_SUCCESS,\n        payload: questions\n      });\n    } catch (error) {\n      yield put({\n        type: types.CREATE_QUESTIONS_FAILED,\n        payload: error\n      });\n    }\n  }();\n}\nfunction getAllQuestions(_ref2) {\n  let {\n    payload\n  } = _ref2;\n  return function* () {\n    try {\n      const questions = yield call(api.getAllQuestions, payload);\n      yield put({\n        type: types.GET_QUESTIONS_SUCCESS,\n        payload: questions\n      });\n    } catch (error) {\n      yield put({\n        type: types.GET_QUESTIONS_FAILED,\n        payload: error\n      });\n    }\n  }();\n}\nfunction getQuestionById(_ref3) {\n  let {\n    payload\n  } = _ref3;\n  return function* () {\n    try {\n      const question = yield call(api.getQuestionsById, payload);\n      yield put({\n        type: types.GET_QUESTIONS_BY_ID_SUCCESS,\n        payload: question\n      });\n    } catch (error) {\n      yield put({\n        type: types.GET_QUESTIONS_BY_ID_FAILED,\n        payload: error\n      });\n    }\n  }();\n}\nfunction updateQuestions(_ref4) {\n  let {\n    payload\n  } = _ref4;\n  return function* () {\n    try {\n      const question = yield call(api.updateQuestions, payload);\n      yield put({\n        type: types.UPDATE_QUESTIONS_SUCCESS,\n        payload: question\n      });\n    } catch (error) {\n      yield put({\n        type: types.UPDATE_QUESTIONS_FAILED,\n        payload: error\n      });\n    }\n  }();\n}\nfunction deleteQuestions(_ref5) {\n  let {\n    payload\n  } = _ref5;\n  return function* () {\n    try {\n      const question = yield call(api.deleteQuestions, payload);\n      yield put({\n        type: types.DELETE_QUESTIONS_SUCCESS,\n        payload: question\n      });\n    } catch (error) {\n      yield put({\n        type: types.DELETE_QUESTIONS_FAILED,\n        payload: error\n      });\n    }\n  }();\n}\nfunction* questionSaga() {\n  yield takeEvery(types.GET_QUESTIONS, getAllQuestions);\n  yield takeEvery(types.GET_QUESTIONS_BY_ID, getQuestionById);\n  yield takeEvery(types.CREATE_QUESTIONS, createQuestions);\n  yield takeEvery(types.UPDATE_QUESTIONS, updateQuestions);\n  yield takeEvery(types.DELETE_QUESTIONS, deleteQuestions);\n}\nexport default questionSaga;","map":{"version":3,"names":["call","put","takeEvery","types","api","createQuestions","payload","questions","type","CREATE_QUESTIONS_SUCCESS","error","CREATE_QUESTIONS_FAILED","getAllQuestions","GET_QUESTIONS_SUCCESS","GET_QUESTIONS_FAILED","getQuestionById","question","getQuestionsById","GET_QUESTIONS_BY_ID_SUCCESS","GET_QUESTIONS_BY_ID_FAILED","updateQuestions","UPDATE_QUESTIONS_SUCCESS","UPDATE_QUESTIONS_FAILED","deleteQuestions","DELETE_QUESTIONS_SUCCESS","DELETE_QUESTIONS_FAILED","questionSaga","GET_QUESTIONS","GET_QUESTIONS_BY_ID","CREATE_QUESTIONS","UPDATE_QUESTIONS","DELETE_QUESTIONS"],"sources":["/home/babi/Desktop/Medical-Question-Bank/Medical-Question-Bank-Website/admin/src/sagas/questionsSaga.js"],"sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\nimport * as types from \"../constants/questionsActionTypes.js\";\nimport * as api from \"../features/questionsets/api/index.js\";\n\nfunction* createQuestions({ payload }) {\n  try {\n    const questions = yield call(api.createQuestions, payload);\n    yield put({ type: types.CREATE_QUESTIONS_SUCCESS, payload: questions });\n  } catch (error) {\n    yield put({\n      type: types.CREATE_QUESTIONS_FAILED,\n      payload: error,\n    });\n  }\n}\n\nfunction* getAllQuestions({ payload }) {\n  try {\n    const questions = yield call(api.getAllQuestions, payload);\n    yield put({ type: types.GET_QUESTIONS_SUCCESS, payload: questions });\n  } catch (error) {\n    yield put({\n      type: types.GET_QUESTIONS_FAILED,\n      payload: error,\n    });\n  }\n}\n\nfunction* getQuestionById({ payload }) {\n  try {\n    const question = yield call(api.getQuestionsById, payload);\n    yield put({ type: types.GET_QUESTIONS_BY_ID_SUCCESS, payload: question });\n  } catch (error) {\n    yield put({\n      type: types.GET_QUESTIONS_BY_ID_FAILED,\n      payload: error,\n    });\n  }\n}\n\nfunction* updateQuestions({ payload }) {\n  try {\n    const question = yield call(api.updateQuestions, payload);\n    yield put({ type: types.UPDATE_QUESTIONS_SUCCESS, payload: question });\n  } catch (error) {\n    yield put({ type: types.UPDATE_QUESTIONS_FAILED, payload: error });\n  }\n}\n\nfunction* deleteQuestions({ payload }) {\n  try {\n    const question = yield call(api.deleteQuestions, payload);\n    yield put({ type: types.DELETE_QUESTIONS_SUCCESS, payload: question });\n  } catch (error) {\n    yield put({ type: types.DELETE_QUESTIONS_FAILED, payload: error });\n  }\n}\n\nfunction* questionSaga() {\n  yield takeEvery(types.GET_QUESTIONS, getAllQuestions);\n  yield takeEvery(types.GET_QUESTIONS_BY_ID, getQuestionById);\n\n  yield takeEvery(types.CREATE_QUESTIONS, createQuestions);\n  yield takeEvery(types.UPDATE_QUESTIONS, updateQuestions);\n  yield takeEvery(types.DELETE_QUESTIONS, deleteQuestions);\n}\n\nexport default questionSaga;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}