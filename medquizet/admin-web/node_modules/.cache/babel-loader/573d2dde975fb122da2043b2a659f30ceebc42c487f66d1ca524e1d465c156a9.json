{"ast":null,"code":"var _jsxFileName = \"/home/babi/Desktop/Medical-Question-Bank/Medical-Question-Bank-Website/admin/src/features/questionsets/components/forms/ChoiceForm.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Button, Stack, Input } from \"@mui/material\";\nimport FormControl from \"@mui/material/FormControl\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"@mui/icons-material/Remove\";\nimport DoneIcon from \"@mui/icons-material/Done\";\nimport { useController } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionChoice = _ref => {\n  _s();\n  let {\n    choice,\n    index,\n    remove,\n    append,\n    selectedQuestion,\n    register,\n    getValues,\n    watch,\n    control\n  } = _ref;\n  const questionFieldName = `questions[${selectedQuestion}]`;\n  const {\n    field: answerField\n  } = useController({\n    name: `${questionFieldName}.answer`,\n    control,\n    defaultValue: \"\"\n  });\n  const {\n    field: choiceIdField\n  } = useController({\n    name: `${questionFieldName}.choices[${index}].id`,\n    control,\n    defaultValue: \"\"\n  });\n  const handleChoiceSelect = (selectedQuestion, index, choiceId) => {\n    answerField.onChange(choiceId);\n    choiceIdField.onChange(choiceId);\n  };\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    sx: {\n      gap: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      sx: {\n        flexDirection: \"row\",\n        gap: \"10px\",\n        width: \"100% !important\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          if (getValues(`questions.${selectedQuestion}.choices.length`) > 1) {\n            if (watch(`questions.${selectedQuestion}.answer`) === watch(`questions.${selectedQuestion}.choices.${index}.id`)) {\n              answerField.onChange(\"\");\n            }\n            remove(index);\n          }\n        },\n        sx: {\n          width: \"20px\",\n          background: \"#f6f9fa\",\n          color: \"black\"\n        },\n        children: /*#__PURE__*/_jsxDEV(RemoveIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        sx: {\n          width: \"100%\"\n        },\n        variant: \"standard\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          disableUnderline: true,\n          fullWidth: true,\n          type: \"text\",\n          ...register(`questions[${selectedQuestion}].choices[${index}].value`, {\n            required: \"question choice is required\"\n          }),\n          variant: \"outlined\",\n          id: \"outlined-basic title\",\n          sx: {\n            background: \"#f6f9fa\",\n            padding: \"8px 16px\",\n            borderRadius: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          handleChoiceSelect(selectedQuestion, index, choice.id);\n        },\n        sx: {\n          width: \"20px\",\n          background: watch(`questions.${selectedQuestion}.answer`) === watch(`questions.${selectedQuestion}.choices.${index}.id`) ? \"#078989\" : \"#f6f9fa\",\n          color: watch(`questions.${selectedQuestion}.answer`) === watch(`questions.${selectedQuestion}.choices.${index}.id`) ? \"white\" : \"black\",\n          \"&:hover\": {\n            background: watch(`questions.${selectedQuestion}.answer`) === watch(`questions.${selectedQuestion}.choices.${index}.id`) ? \"#078989\" : \"#f6f9fa\"\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(DoneIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), index + 1 === getValues(`questions.${selectedQuestion}.choices.length`) && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => {\n        if (getValues(`questions.${selectedQuestion}.choices.${index}.value`)) {\n          append({\n            id: index + 1,\n            value: \"\"\n          });\n        }\n      },\n      sx: {\n        width: \"20px\",\n        background: \"#f6f9fa\",\n        color: \"black\"\n      },\n      children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionChoice, \"SwqdmlAloEQKhlpHoiJjTjfQEoc=\", false, function () {\n  return [useController, useController];\n});\n_c = QuestionChoice;\nexport default QuestionChoice;\nvar _c;\n$RefreshReg$(_c, \"QuestionChoice\");","map":{"version":3,"names":["React","Button","Stack","Input","FormControl","AddIcon","RemoveIcon","DoneIcon","useController","QuestionChoice","choice","index","remove","append","selectedQuestion","register","getValues","watch","control","questionFieldName","field","answerField","name","defaultValue","choiceIdField","handleChoiceSelect","choiceId","onChange","gap","flexDirection","width","background","color","required","padding","borderRadius","id","value"],"sources":["/home/babi/Desktop/Medical-Question-Bank/Medical-Question-Bank-Website/admin/src/features/questionsets/components/forms/ChoiceForm.js"],"sourcesContent":["import React from \"react\";\n\nimport { Button, Stack, Input } from \"@mui/material\";\n\nimport FormControl from \"@mui/material/FormControl\";\n\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"@mui/icons-material/Remove\";\nimport DoneIcon from \"@mui/icons-material/Done\";\n\nimport { useController } from \"react-hook-form\";\n\nconst QuestionChoice = ({\n  choice,\n  index,\n  remove,\n  append,\n  selectedQuestion,\n  register,\n  getValues,\n  watch,\n  control,\n}) => {\n  const questionFieldName = `questions[${selectedQuestion}]`;\n  const { field: answerField } = useController({\n    name: `${questionFieldName}.answer`,\n    control,\n    defaultValue: \"\",\n  });\n  const { field: choiceIdField } = useController({\n    name: `${questionFieldName}.choices[${index}].id`,\n    control,\n    defaultValue: \"\",\n  });\n\n  const handleChoiceSelect = (selectedQuestion, index, choiceId) => {\n    answerField.onChange(choiceId);\n    choiceIdField.onChange(choiceId);\n  };\n\n  return (\n    <Stack sx={{ gap: \"20px\" }}>\n      <Stack\n        sx={{\n          flexDirection: \"row\",\n          gap: \"10px\",\n          width: \"100% !important\",\n        }}\n      >\n        {/* {index + 1 < getValues(`questions.${selectedQuestion}.choices.length`) ? ( */}\n        <Button\n          onClick={() => {\n            if (getValues(`questions.${selectedQuestion}.choices.length`) > 1) {\n              if (\n                watch(`questions.${selectedQuestion}.answer`) ===\n                watch(`questions.${selectedQuestion}.choices.${index}.id`)\n              ) {\n                answerField.onChange(\"\");\n              }\n              remove(index);\n            }\n          }}\n          sx={{ width: \"20px\", background: \"#f6f9fa\", color: \"black\" }}\n        >\n          <RemoveIcon />\n        </Button>\n\n        <FormControl sx={{ width: \"100%\" }} variant=\"standard\">\n          <Input\n            disableUnderline\n            fullWidth\n            type=\"text\"\n            {...register(\n              `questions[${selectedQuestion}].choices[${index}].value`,\n              {\n                required: \"question choice is required\",\n              }\n            )}\n            variant=\"outlined\"\n            id=\"outlined-basic title\"\n            sx={{\n              background: \"#f6f9fa\",\n              padding: \"8px 16px\",\n              borderRadius: \"5px\",\n            }}\n          />\n        </FormControl>\n\n        <Button\n          onClick={() => {\n            handleChoiceSelect(selectedQuestion, index, choice.id);\n          }}\n          sx={{\n            width: \"20px\",\n            background:\n              watch(`questions.${selectedQuestion}.answer`) ===\n              watch(`questions.${selectedQuestion}.choices.${index}.id`)\n                ? \"#078989\"\n                : \"#f6f9fa\",\n            color:\n              watch(`questions.${selectedQuestion}.answer`) ===\n              watch(`questions.${selectedQuestion}.choices.${index}.id`)\n                ? \"white\"\n                : \"black\",\n            \"&:hover\": {\n              background:\n                watch(`questions.${selectedQuestion}.answer`) ===\n                watch(`questions.${selectedQuestion}.choices.${index}.id`)\n                  ? \"#078989\"\n                  : \"#f6f9fa\",\n            },\n          }}\n        >\n          <DoneIcon />\n        </Button>\n      </Stack>\n      {index + 1 ===\n        getValues(`questions.${selectedQuestion}.choices.length`) && (\n        <Button\n          onClick={() => {\n            if (\n              getValues(`questions.${selectedQuestion}.choices.${index}.value`)\n            ) {\n              append({ id: index + 1, value: \"\" });\n            }\n          }}\n          sx={{ width: \"20px\", background: \"#f6f9fa\", color: \"black\" }}\n        >\n          <AddIcon />\n        </Button>\n      )}\n    </Stack>\n  );\n};\nexport default QuestionChoice;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}